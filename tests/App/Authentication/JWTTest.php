<?php
declare(strict_types=1);

namespace EMA\Tests\App\Authentication;

use Carbon\Carbon;
use EMA\App\Http\Authentication\BadToken;
use EMA\App\Http\Authentication\JWT;
use EMA\Domain\Foundation\VO\Identity;
use EMA\Tests\BaseTest;

final class JWTTest extends BaseTest
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    function test_it_parses_own_token() {
        Carbon::setTestNow(Carbon::parse("01.01.2001 00:00:01"));
        $id = new Identity();
        $jwt = new JWT();
        $token = $jwt->makeToken($id);
    
        Carbon::setTestNow(Carbon::parse("01.01.2001 00:00:02"));
        $id_rev = $jwt->parseToken($token);
        $this->assertTrue($id_rev->isEqual($id));
    
    }
    
    
    function test_jwt_validates_good_token()
    {
        $token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImlzcyI6ImVtYS5hcHAudGVzdCIsImlhdCI6MTQ5MjUyNTMwMywiZXhwIjoxNTI0MDYxMzAzLCJhdWQiOiJhbnlvbmUifQ.eyJzdWIiOiI5ODY1ZDZhZi04MjEzLTQ2MTItYWZiNi00Mzc1ODRjMGUyN2EifQ.zp7T8kc_HaVH7H63us5U_fk0tqGTMwRHxFJLPlhp4p4";
        $jwt   = new JWT();
        $this->assertTrue($jwt->parseToken($token)->isEqual(new Identity('9865d6af-8213-4612-afb6-437584c0e27a')));
    }
    
    /**
     * @dataProvider bad_tokens
     */
    function test_jwt_throws_exception_on_invalid_token($bad_token)
    {
        $this->expectException(BadToken::class);
    
        $jwt = new JWT();
        $jwt->parseToken($bad_token);
    }
    
    public function bad_tokens()
    {
        return [
            [''],
            //empty
            ['malformatted'],
            //empty
            ['malformatted.asd.asd'],
            //empty
            //none signer
            ['eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJpc3MiOiJlbWEuYXBwLnRlc3QiLCJzdWIiOiI1N2ZkNzk5Ny01MGNjLTRjZjEtOTI5Mi0xMWQ5YTA1MWNhMDAiLCJuYmYiOjE0OTI1MjU0MTgsImV4cCI6MTQ5MjUyOTAxOCwiaWF0IjoxNDkyNTI1NDE4LCJqdGkiOiJpZDEyMzQ1NiIsInR5cCI6Imp3dCJ9.'],
            //none signer
            ['eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiI5ODY1ZDZhZi04MjEzLTQ2MTItYWZiNi00Mzc1ODRjMGUyN2EiLCJpc3MiOiJlbWEuYXBwLnRlc3QiLCJpYXQiOjE0NTI1MjUzMDMsImV4cCI6MTQ1MjYyNTMwMywiYXVkIjoiYW55b25lIn0.hSUOZ-ivUDayS_JC0ppPY4yTFhVSS-xCakdIvRUkkHE'],
            //signed with other key
            ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhc2QifQ.mDk5iE0bZ3RXbIHBj91F4xSzirSXkDu-fQJBQhC2nbQ'],
            // other issuer
            ['eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJlbWEuYXBwLnRlc3QxIiwiYXVkIjoiYW55b25lIiwic3ViIjoiZWM3NjY0MzAtMjQ1NS0xMWU3LTg2MzAtYTQ1ZTYwYzg4YTI1IiwiaWF0IjoxNDkyNTMzNzExLCJuYmYiOjE0OTI1MzM3NzEsImV4cCI6MTQ5NTEyNTcxMX0.N1rxnnP_kijhXNbQY2YQKbXkld_6f_e8H_6lmUHp2y4'],
             //expired
            ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ODY1ZDZhZi04MjEzLTQ2MTItYWZiNi00Mzc1ODRjMGUyN2EiLCJpc3MiOiJlbWEuYXBwLnRlc3QiLCJpYXQiOjE0NTI1MjUzMDMsImV4cCI6MTQ1MjYyNTMwMywiYXVkIjoiYW55b25lIn0.V1sMiK-4SweQb_VsPofrVMi2dgnxT0JQJOOsUY2ye1w'],
        ];
    }
    
    
}