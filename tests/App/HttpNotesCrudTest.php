<?php
declare(strict_types=1);

namespace EMA\Tests\App;

use Carbon\Carbon;
use Doctrine\DBAL\Connection;
use EMA\App\Account\Query\FindAccount\FindAccount;
use EMA\App\Note\Query\NoteFinder;
use EMA\Domain\Foundation\VO\Identity;
use EMA\Domain\Note\Model\Collection\NoteCollection;
use EMA\Domain\Note\Model\Note;
use EMA\Domain\Note\Model\VO\NoteText;
use EMA\Tests\BaseTest;
use Slim\App;


/**
 * Test http requests to CRUD oeprations
 */
class HttpNotesCrudTest extends BaseTest
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        
        $this->restartContainer();
    }
    
    function test_user_can_signup_with_google()
    {
        $client_mock = $this->getMockBuilder(\Google_Client::class)
                            ->setMethods([
                                'verifyIdToken',
                                'fetchAccessTokenWithAuthCode',
                                'getAccessToken',
                            ])->getMock();
        
        $client_mock->method('fetchAccessTokenWithAuthCode')->willReturn(true);
        $client_mock->method('verifyIdToken')->willReturn(['sub' => 'some_id']);
        $client_mock->method('getAccessToken')->willReturn(['sub' => 'some_id']);
        
        container()->set(\Google_Client::class, $client_mock);
        
        $app           = container()->get(App::class);
        $path          = $app->getContainer()->get('router')->pathFor('api.google.exchange');
        $request       = $this->getRequest("get", $path, ['code' => 'some_code']);
        $response      = $this->sendHttpRequest($request, $app);
        $json_response = json_decode((string)$response->getBody(), true);
        
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertTrue(isset($json_response['access_token']));
        
        // Make sure this user has created
        query_bus()->dispatch(new FindAccount('google', 'some_id'))->then(
            function ($account) {
                $this->assertNotEquals(count($account), 0);
            },
            function (\Throwable $e) {
                $this->fail($e);
            }
        )->done();
        
        
    }
    
    function test_get_my_notes()
    {
        
        // seed
        $me     = new Identity();
        $not_me = new Identity();
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $me));
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $me));
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $not_me));
        
        // get all my notes
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes');
        $request  = $this->getRequest("get", $path, [], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        $this->assertEquals(2, count($json_response));
        
    }
    
    function test_get_recent_notes()
    {
        // seed
        $me     = new Identity();
        $not_me = new Identity();
    
        // imitate new notes every second
        Carbon::setTestNow(Carbon::parse("01.01.2017 00:00:00"));
        $note1 = new Note(new Identity(), new NoteText("1"), $me);
        Carbon::setTestNow(Carbon::now()->addSecond());
        $note2 = new Note(new Identity(), new NoteText("2"), $me);
        Carbon::setTestNow(Carbon::now()->addSecond());
        $note3 = new Note(new Identity(), new NoteText("3"), $me);
        Carbon::setTestNow(Carbon::now()->addSecond());
        $note4 = new Note(new Identity(), new NoteText("4"), $not_me);
        
        container()->get(NoteCollection::class)->save($note1);
        container()->get(NoteCollection::class)->save($note2);
        container()->get(NoteCollection::class)->save($note3);
        container()->get(NoteCollection::class)->save($note4);
        
        // get 2 my recent notes
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.recent');
        $request  = $this->getRequest("get", $path . "?count=2", [], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        $this->assertEquals(2, count($json_response));
        
        $this->assertEquals($note3->getId()->getAsString(), $json_response[0]['id']);
        $this->assertEquals($note2->getId()->getAsString(), $json_response[1]['id']);
        
    }
    
    function test_search_notes()
    {
        // seed
        $me       = new Identity();
        $note_id1 = new Identity();
        $note_id2 = new Identity();
        container()->get(NoteCollection::class)->save(new Note($note_id1,
            new NoteText("sequences of uncertainty have started"), $me));
        container()->get(NoteCollection::class)->save(new Note($note_id2,
            new NoteText("when will the star fall down?"), $me));
        
        // get all my notes
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.search', [
            'query' => 'sequence',
        ]);
        $request  = $this->getRequest("get", $path, [], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        $this->assertEquals(1, count($json_response));
        $this->assertEquals($note_id1->getAsString(), $json_response[0]['id']);
    }
    
    function test_unable_to_see_other_people_note()
    {
        // seed
        $me     = new Identity();
        $not_me = new Identity();
        $this->setAuthenticatedUser($me);
        
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $not_me));
        
        // get all my notes
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.search', [
            'query' => 'sequence',
        ]);
        $request  = $this->getRequest("get", $path, [], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        $this->assertEquals(0, count($json_response));
    }
    
    function test_add_new_note()
    {
        // seed
        $me = new Identity();
        $this->setAuthenticatedUser($me);
        $this->assertEquals(0, container()->get(NoteCollection::class)->all()->count());
        
        // send request
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes');
        $request  = $this->getRequest("post", $path, ['text' => 'hello'], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        
        $this->assertEquals(1, container()->get(NoteCollection::class)->all()->count());
    }
    
    function test_unable_to_add_empty_note()
    {
        // seed
        $me = new Identity();
        $this->setAuthenticatedUser($me);
        $this->assertEquals(0, container()->get(NoteCollection::class)->all()->count());
        
        // send request
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes');
        $request  = $this->getRequest("post", $path, ['text' => ''], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(422, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        $this->assertEquals("INVALID_DATA", $json_response['error_code']);
    }
    
    function test_update_note()
    {
        // seed
        $me = new Identity();
        $this->setAuthenticatedUser($me);
        
        $note_id1 = new Identity();
        $note_id2 = new Identity();
        container()->get(NoteCollection::class)->save(new Note($note_id1, new NoteText("text1"), $me));
        container()->get(NoteCollection::class)->save(new Note($note_id2, new NoteText("text2"), $me));
        
        // send request
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.update', [
            'note_id' => $note_id1->getAsString(),
        ]);
        $request  = $this->getRequest("post", $path, ["text" => "text1_edited"], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(2, container()->get(NoteCollection::class)->all()->count());
        $this->assertEquals("text1_edited",
            container()->get(NoteCollection::class)->all()->first()->getText()->getText());
        $this->assertEquals("text2", container()->get(NoteCollection::class)->all()->get(1)->getText()->getText());
    }
    
    
    function test_unable_to_change_other_note()
    {
        // seed
        $me     = new Identity();
        $not_me = new Identity();
        $this->setAuthenticatedUser($me);
        
        $note_id = new Identity();
        container()->get(NoteCollection::class)->save(new Note($note_id, new NoteText("text"), $not_me));
        
        // send request
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.update', [
            'note_id' => $note_id->getAsString(),
        ]);
        $request  = $this->getRequest("post", $path, ["text" => "text2"], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(403, $response->getStatusCode());
    }
    
    function test_can_delete_my_note()
    {
        // seed
        $me = new Identity();
        $this->setAuthenticatedUser($me);
        
        $note_id = new Identity();
        container()->get(NoteCollection::class)->save(new Note($note_id, new NoteText("text"), $me));
        
        // send request
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.delete', [
            'note_id' => $note_id->getAsString(),
        ]);
        $request  = $this->getRequest("delete", $path, [], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(0, container()->get(NoteCollection::class)->all()->count());
    }
    
    function test_cannot_delete_other_people_note()
    {
        // seed
        $me     = new Identity();
        $not_me = new Identity();
        $this->setAuthenticatedUser($me);
        
        $note_id = new Identity();
        container()->get(NoteCollection::class)->save(new Note($note_id, new NoteText("text"), $not_me));
        
        // send request
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes.delete', [
            'note_id' => $note_id->getAsString(),
        ]);
        $request  = $this->getRequest("delete", $path, [], $me);
        $response = $this->sendHttpRequest($request, $app);
        
        $this->assertEquals(403, $response->getStatusCode());
    }
    
}