<?php
declare(strict_types=1);

namespace EMA\Tests\App;

use EMA\Domain\Foundation\VO\Identity;
use EMA\Domain\Note\Model\Collection\NoteCollection;
use EMA\Domain\Note\Model\Note;
use EMA\Domain\Note\Model\VO\NoteText;
use EMA\Tests\BaseTest;
use Slim\App;


/**
 * Test http requests to CRUD oeprations
 */
final class HttpNotesCrudTest extends BaseTest
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        
        $this->restartContainer();
    }
    
    
    function test_get_my_notes()
    {
        
        // seed
        $me     = new Identity();
        $not_me = new Identity();
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $me));
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $me));
        container()->get(NoteCollection::class)->save(new Note(new Identity(), new NoteText(""), $not_me));
        
        // get all my notes
        $app      = container()->get(App::class);
        $path     = $app->getContainer()->get('router')->pathFor('api.notes');
        $response = $this->sendHttp("get", $path, [], $me);
        
        $this->assertEquals(200, $response->getStatusCode());
        $json_response = json_decode((string)$response->getBody(), true);
        $this->assertEquals(2, count($json_response));
        
    }
    
    function test_add_new_note()
    {
        $this->markTestIncomplete();
    }
    
    function test_update_note()
    {
        $this->markTestIncomplete();
    }
    
    function test_unable_to_see_other_people_note()
    {
        $this->markTestIncomplete();
    }
    
    function test_unable_to_change_other_note()
    {
        $this->markTestIncomplete();
    }
    
    function test_can_delete_my_note()
    {
        $this->markTestIncomplete();
    }
    
    function test_cannot_delete_other_people_note()
    {
        $this->markTestIncomplete();
    }
    
}